{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useContext, useEffect } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport YourOrder from \"./YourOrder\";\nimport PaymentModes from \"./PaymentModes\";\nimport { AppContext } from \"../context/AppContext\";\nimport validateAndSanitizeCheckoutForm from '../../validator/checkout';\nimport { getFormattedCart, createCheckoutData } from \"../../functions\";\nimport OrderSuccess from \"./OrderSuccess\";\nimport GET_CART from \"../../queries/get-cart\";\nimport CHECKOUT_MUTATION from \"../../mutations/checkout\";\nimport Address from \"./Address\";\nimport { handleBillingDifferentThanShipping, handleCreateAccount, setStatesForCountry } from \"../../utils/checkout\";\nimport CheckboxField from \"./form-elements/CheckboxField\"; // Use this for testing purposes, so you dont have to fill the checkout form over an over again.\n// const defaultCustomerInfo = {\n// \tfirstName: 'Imran',\n// \tlastName: 'Sayed',\n// \taddress1: '123 Abc farm',\n// \taddress2: 'Hill Road',\n// \tcity: 'Mumbai',\n// \tcountry: 'IN',\n// \tstate: 'Maharastra',\n// \tpostcode: '221029',\n// \temail: 'codeytek.academy@gmail.com',\n// \tphone: '9883778278',\n// \tcompany: 'The Company',\n// \terrors: null\n// }\n\nconst defaultCustomerInfo = {\n  firstName: '',\n  lastName: '',\n  address1: '',\n  address2: '',\n  city: '',\n  country: '',\n  state: '',\n  postcode: '',\n  email: '',\n  phone: '',\n  company: '',\n  errors: null\n};\n\nconst CheckoutForm = ({\n  countriesData\n}) => {\n  const {\n    billingCountries,\n    shippingCountries\n  } = countriesData || {};\n  const initialState = {\n    billing: _objectSpread({}, defaultCustomerInfo),\n    shipping: _objectSpread({}, defaultCustomerInfo),\n    createAccount: false,\n    orderNotes: '',\n    billingDifferentThanShipping: false,\n    paymentMethod: 'cod'\n  };\n  const {\n    0: cart,\n    1: setCart\n  } = useContext(AppContext);\n  const {\n    0: input,\n    1: setInput\n  } = useState(initialState);\n  const {\n    0: orderData,\n    1: setOrderData\n  } = useState(null);\n  const {\n    0: requestError,\n    1: setRequestError\n  } = useState(null);\n  const {\n    0: theShippingStates,\n    1: setTheShippingStates\n  } = useState([]);\n  const {\n    0: isFetchingShippingStates,\n    1: setIsFetchingShippingStates\n  } = useState(false);\n  const {\n    0: theBillingStates,\n    1: setTheBillingStates\n  } = useState([]);\n  const {\n    0: isFetchingBillingStates,\n    1: setIsFetchingBillingStates\n  } = useState(false); // Get Cart Data.\n\n  const {\n    data\n  } = useQuery(GET_CART, {\n    notifyOnNetworkStatusChange: true,\n    onCompleted: () => {\n      // Update cart in the localStorage.\n      const updatedCart = getFormattedCart(data);\n      localStorage.setItem('tenwi-cart', JSON.stringify(updatedCart)); // Update cart data in React Context.\n\n      setCart(updatedCart);\n    }\n  }); // Create New order: Checkout Mutation.\n\n  const [checkout, {\n    data: checkoutResponse,\n    loading: checkoutLoading\n  }] = useMutation(CHECKOUT_MUTATION, {\n    variables: {\n      input: orderData\n    },\n    onError: error => {\n      if (error) {\n        var _error$graphQLErrors$, _error$graphQLErrors, _error$graphQLErrors$2;\n\n        setRequestError((_error$graphQLErrors$ = error === null || error === void 0 ? void 0 : (_error$graphQLErrors = error.graphQLErrors) === null || _error$graphQLErrors === void 0 ? void 0 : (_error$graphQLErrors$2 = _error$graphQLErrors[0]) === null || _error$graphQLErrors$2 === void 0 ? void 0 : _error$graphQLErrors$2.message) !== null && _error$graphQLErrors$ !== void 0 ? _error$graphQLErrors$ : '');\n      }\n    }\n  });\n  /*\n   * Handle form submit.\n   *\n   * @param {Object} event Event Object.\n   *\n   * @return {void}\n   */\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    /**\n     * Validate Billing and Shipping Details\n     *\n     * Note:\n     * 1. If billing is different than shipping address, only then validate billing.\n     * 2. We are passing theBillingStates?.length and theShippingStates?.length, so that\n     * the respective states should only be mandatory, if a country has states.\n     */\n\n    const billingValidationResult = input !== null && input !== void 0 && input.billingDifferentThanShipping ? validateAndSanitizeCheckoutForm(input === null || input === void 0 ? void 0 : input.billing, theBillingStates === null || theBillingStates === void 0 ? void 0 : theBillingStates.length) : {\n      errors: null,\n      isValid: true\n    };\n    const shippingValidationResult = validateAndSanitizeCheckoutForm(input === null || input === void 0 ? void 0 : input.shipping, theShippingStates === null || theShippingStates === void 0 ? void 0 : theShippingStates.length);\n\n    if (!shippingValidationResult.isValid || !billingValidationResult.isValid) {\n      setInput(_objectSpread(_objectSpread({}, input), {}, {\n        billing: _objectSpread(_objectSpread({}, input.billing), {}, {\n          errors: billingValidationResult.errors\n        }),\n        shipping: _objectSpread(_objectSpread({}, input.shipping), {}, {\n          errors: shippingValidationResult.errors\n        })\n      }));\n      return;\n    }\n\n    const checkOutData = createCheckoutData(input);\n    setRequestError(null);\n    /**\n     *  When order data is set, checkout mutation will automatically be called,\n     *  because 'orderData' is added in useEffect as a dependency.\n     */\n\n    setOrderData(checkOutData);\n  };\n  /*\n   * Handle onchange input.\n   *\n   * @param {Object} event Event Object.\n   * @param {bool} isShipping If this is false it means it is billing.\n   * @param {bool} isBillingOrShipping If this is false means its standard input and not billing or shipping.\n   *\n   * @return {void}\n   */\n\n\n  const handleOnChange = async (event, isShipping = false, isBillingOrShipping = false) => {\n    const {\n      target\n    } = event || {};\n\n    if ('createAccount' === target.name) {\n      handleCreateAccount(input, setInput, target);\n    } else if ('billingDifferentThanShipping' === target.name) {\n      handleBillingDifferentThanShipping(input, setInput, target);\n    } else if (isBillingOrShipping) {\n      if (isShipping) {\n        await handleShippingChange(target);\n      } else {\n        await handleBillingChange(target);\n      }\n    } else {\n      const newState = _objectSpread(_objectSpread({}, input), {}, {\n        [target.name]: target.value\n      });\n\n      setInput(newState);\n    }\n  };\n\n  const handleShippingChange = async target => {\n    const newState = _objectSpread(_objectSpread({}, input), {}, {\n      shipping: _objectSpread(_objectSpread({}, input === null || input === void 0 ? void 0 : input.shipping), {}, {\n        [target.name]: target.value\n      })\n    });\n\n    setInput(newState);\n    await setStatesForCountry(target, setTheShippingStates, setIsFetchingShippingStates);\n  };\n\n  const handleBillingChange = async target => {\n    const newState = _objectSpread(_objectSpread({}, input), {}, {\n      billing: _objectSpread(_objectSpread({}, input === null || input === void 0 ? void 0 : input.billing), {}, {\n        [target.name]: target.value\n      })\n    });\n\n    setInput(newState);\n    await setStatesForCountry(target, setTheBillingStates, setIsFetchingBillingStates);\n  };\n\n  useEffect(async () => {\n    if (null !== orderData) {\n      // Call the checkout mutation when the value for orderData changes/updates.\n      await checkout();\n    }\n  }, [orderData]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [cart ? /*#__PURE__*/_jsx(\"form\", {\n      onSubmit: handleFormSubmit,\n      className: \"checkout-form\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-20\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"billing-details\",\n            children: [/*#__PURE__*/_jsx(\"h2\", {\n              className: \"text-xl font-medium mb-4\",\n              children: \"Shipping Details\"\n            }), /*#__PURE__*/_jsx(Address, {\n              states: theShippingStates,\n              countries: shippingCountries,\n              input: input === null || input === void 0 ? void 0 : input.shipping,\n              handleOnChange: event => handleOnChange(event, true, true),\n              isFetchingStates: isFetchingShippingStates,\n              isShipping: true,\n              isBillingOrShipping: true\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(CheckboxField, {\n              name: \"billingDifferentThanShipping\",\n              type: \"checkbox\",\n              checked: input === null || input === void 0 ? void 0 : input.billingDifferentThanShipping,\n              handleOnChange: handleOnChange,\n              label: \"Billing different than shipping\",\n              containerClassNames: \"mb-4 pt-4\"\n            })\n          }), input !== null && input !== void 0 && input.billingDifferentThanShipping ? /*#__PURE__*/_jsxs(\"div\", {\n            className: \"billing-details\",\n            children: [/*#__PURE__*/_jsx(\"h2\", {\n              className: \"text-xl font-medium mb-4\",\n              children: \"Billing Details\"\n            }), /*#__PURE__*/_jsx(Address, {\n              states: theBillingStates,\n              countries: billingCountries,\n              input: input === null || input === void 0 ? void 0 : input.billing,\n              handleOnChange: event => handleOnChange(event, false, true),\n              isFetchingStates: isFetchingBillingStates,\n              isShipping: false,\n              isBillingOrShipping: true\n            })]\n          }) : null]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"your-orders\",\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            className: \"text-xl font-medium mb-4\",\n            children: \"Your Order\"\n          }), /*#__PURE__*/_jsx(YourOrder, {\n            cart: cart\n          }), /*#__PURE__*/_jsx(PaymentModes, {\n            input: input,\n            handleOnChange: handleOnChange\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"place-order-btn-wrap mt-5\",\n            children: /*#__PURE__*/_jsx(\"button\", {\n              className: \"bg-purple-600 text-white px-5 py-3 rounded-sm w-auto xl:w-full\",\n              type: \"submit\",\n              children: \"Place Order\"\n            })\n          }), checkoutLoading && /*#__PURE__*/_jsx(\"p\", {\n            children: \"Processing Order...\"\n          }), requestError && /*#__PURE__*/_jsxs(\"p\", {\n            children: [\"Error : \", requestError, \" :( Please try again\"]\n          })]\n        })]\n      })\n    }) : '', /*#__PURE__*/_jsx(OrderSuccess, {\n      response: checkoutResponse\n    })]\n  });\n};\n\nexport default CheckoutForm;","map":null,"metadata":{},"sourceType":"module"}