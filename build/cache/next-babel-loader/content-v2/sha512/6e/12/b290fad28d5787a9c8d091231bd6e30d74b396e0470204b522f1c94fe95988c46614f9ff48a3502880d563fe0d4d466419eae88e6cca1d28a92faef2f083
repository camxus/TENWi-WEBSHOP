{"ast":null,"code":"import { v4 } from 'uuid';\n/**\n * Extracts and returns float value from a string.\n *\n * @param {string} string String\n * @return {any}\n */\n\nexport const getFloatVal = string => {\n  let floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport const addFirstProduct = product => {\n  let productPrice = getFloatVal(product.price);\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('tenwi-cart', JSON.stringify(newCart));\n  return newCart;\n};\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productId: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\n/**\n * Updates the existing cart with new item.\n *\n * @param {Object} existingCart Existing Cart.\n * @param {Object} product Product.\n * @param {Integer} qtyToBeAdded Quantity.\n * @param {Integer} newQty New Qty to be updated.\n * @return {{totalProductsCount: *, totalProductsPrice: *, products: *}}\n */\n\nexport const updateCart = (existingCart, product, qtyToBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; // Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem('tenwi-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\n/**\n * Get updated products array\n * Update the product if it exists else,\n * add the new product to existing cart,\n *\n * @param {Object} existingProductsInCart Existing product in cart\n * @param {Object} product Product\n * @param {Integer} qtyToBeAdded Quantity\n * @param {Integer} newQty New qty of the product (optional)\n * @return {*[]}\n */\n\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  // Check if the product already exits in the cart.\n  const productExitsIndex = isProductInCart(existingProductsInCart, product.productId); // If product exits ( index of that product found in the array ), update the product quantity and totalPrice\n\n  if (-1 < productExitsIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productExitsIndex]; // If have new qty of the product available, set that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\n    updatedProduct.totalPrice = parseFloat((updatedProduct.price * updatedProduct.qty).toFixed(2));\n    return updatedProducts;\n  } else {\n    // If product not found push the new product to the existing product array.\n    let productPrice = getFloatVal(product.price);\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n};\n/**\n * Returns index of the product if it exists.\n *\n * @param {Object} existingProductsInCart Existing Products.\n * @param {Integer} productId Product id.\n * @return {number | *} Index Returns -1 if product does not exist in the array, index number otherwise\n */\n\nconst isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExits = (item, index) => {\n    if (productId === item.productId) {\n      return item;\n    }\n  }; // This new array will only contain the product which is matched.\n\n\n  const newArray = existingProductsInCart.filter(returnItemThatExits);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\n/**\n * Remove Item from the cart.\n *\n * @param {Integer} productId Product Id.\n * @return {any | string} Updated cart\n */\n\n\nexport const removeItemFromCart = productId => {\n  let existingCart = localStorage.getItem('tenwi-cart');\n  existingCart = JSON.parse(existingCart); // If there is only one item in the cart, delete the cart.\n\n  if (1 === existingCart.products.length) {\n    localStorage.removeItem('tenwi-cart');\n    return null;\n  } // Check if the product already exits in the cart.\n\n\n  const productExitsIndex = isProductInCart(existingCart.products, productId); // If product to be removed exits\n\n  if (-1 < productExitsIndex) {\n    const productTobeRemoved = existingCart.products[productExitsIndex];\n    const qtyToBeRemovedFromTotal = productTobeRemoved.qty;\n    const priceToBeDeductedFromTotal = productTobeRemoved.totalPrice; // Remove that product from the array and update the total price and total quantity of the cart\n\n    let updatedCart = existingCart;\n    updatedCart.products.splice(productExitsIndex, 1);\n    updatedCart.totalProductsCount = updatedCart.totalProductsCount - qtyToBeRemovedFromTotal;\n    updatedCart.totalProductsPrice = updatedCart.totalProductsPrice - priceToBeDeductedFromTotal;\n    localStorage.setItem('tenwi-cart', JSON.stringify(updatedCart));\n    return updatedCart;\n  } else {\n    return existingCart;\n  }\n};\n/**\n * Returns cart data in the required format.\n * @param {String} data Cart data\n */\n\nexport const getFormattedCart = data => {\n  var _data$cart$total, _data$cart;\n\n  let formattedCart = null;\n\n  if (undefined === data || !data.cart.contents.nodes.length) {\n    return formattedCart;\n  }\n\n  const givenProducts = data.cart.contents.nodes; // Create an empty object.\n\n  formattedCart = {};\n  formattedCart.products = [];\n  let totalProductsCount = 0;\n\n  for (let i = 0; i < givenProducts.length; i++) {\n    var _givenProducts$i, _givenProducts$i$prod, _givenProduct$product, _givenProducts$i$key, _givenProducts$i2, _givenProduct$name, _givenProducts$i3, _givenProducts$i$tota, _givenProducts$i4, _givenProduct$image$s, _givenProduct$image, _givenProduct$image$s2, _givenProduct$image2, _givenProduct$image$t, _givenProduct$image3, _givenProduct$image$a, _givenProduct$image4, _givenProducts$i5;\n\n    const givenProduct = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i = givenProducts[i]) === null || _givenProducts$i === void 0 ? void 0 : (_givenProducts$i$prod = _givenProducts$i.product) === null || _givenProducts$i$prod === void 0 ? void 0 : _givenProducts$i$prod.node;\n    const product = {};\n    const total = getFloatVal(givenProducts[i].total);\n    product.productId = (_givenProduct$product = givenProduct === null || givenProduct === void 0 ? void 0 : givenProduct.productId) !== null && _givenProduct$product !== void 0 ? _givenProduct$product : '';\n    product.cartKey = (_givenProducts$i$key = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i2 = givenProducts[i]) === null || _givenProducts$i2 === void 0 ? void 0 : _givenProducts$i2.key) !== null && _givenProducts$i$key !== void 0 ? _givenProducts$i$key : '';\n    product.name = (_givenProduct$name = givenProduct === null || givenProduct === void 0 ? void 0 : givenProduct.name) !== null && _givenProduct$name !== void 0 ? _givenProduct$name : '';\n    product.qty = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i3 = givenProducts[i]) === null || _givenProducts$i3 === void 0 ? void 0 : _givenProducts$i3.quantity;\n    product.price = total / (product === null || product === void 0 ? void 0 : product.qty);\n    product.totalPrice = (_givenProducts$i$tota = givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i4 = givenProducts[i]) === null || _givenProducts$i4 === void 0 ? void 0 : _givenProducts$i4.total) !== null && _givenProducts$i$tota !== void 0 ? _givenProducts$i$tota : '';\n    product.image = {\n      sourceUrl: (_givenProduct$image$s = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image = givenProduct.image) === null || _givenProduct$image === void 0 ? void 0 : _givenProduct$image.sourceUrl) !== null && _givenProduct$image$s !== void 0 ? _givenProduct$image$s : '',\n      srcSet: (_givenProduct$image$s2 = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image2 = givenProduct.image) === null || _givenProduct$image2 === void 0 ? void 0 : _givenProduct$image2.srcSet) !== null && _givenProduct$image$s2 !== void 0 ? _givenProduct$image$s2 : '',\n      title: (_givenProduct$image$t = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image3 = givenProduct.image) === null || _givenProduct$image3 === void 0 ? void 0 : _givenProduct$image3.title) !== null && _givenProduct$image$t !== void 0 ? _givenProduct$image$t : '',\n      altText: (_givenProduct$image$a = givenProduct === null || givenProduct === void 0 ? void 0 : (_givenProduct$image4 = givenProduct.image) === null || _givenProduct$image4 === void 0 ? void 0 : _givenProduct$image4.altText) !== null && _givenProduct$image$a !== void 0 ? _givenProduct$image$a : ''\n    };\n    totalProductsCount += givenProducts === null || givenProducts === void 0 ? void 0 : (_givenProducts$i5 = givenProducts[i]) === null || _givenProducts$i5 === void 0 ? void 0 : _givenProducts$i5.quantity; // Push each item into the products array.\n\n    formattedCart.products.push(product);\n  }\n\n  formattedCart.totalProductsCount = totalProductsCount;\n  formattedCart.totalProductsPrice = (_data$cart$total = data === null || data === void 0 ? void 0 : (_data$cart = data.cart) === null || _data$cart === void 0 ? void 0 : _data$cart.total) !== null && _data$cart$total !== void 0 ? _data$cart$total : '';\n  return formattedCart;\n};\nexport const createCheckoutData = order => {\n  var _order$shipping, _order$shipping2, _order$shipping3, _order$shipping4, _order$shipping5, _order$shipping6, _order$shipping7, _order$shipping8, _order$shipping9, _order$shipping10, _order$shipping11;\n\n  // Set the billing Data to shipping, if applicable.\n  const billingData = order.billingDifferentThanShipping ? order.billing : order.shipping;\n  const checkoutData = {\n    clientMutationId: v4(),\n    shipping: {\n      firstName: order === null || order === void 0 ? void 0 : (_order$shipping = order.shipping) === null || _order$shipping === void 0 ? void 0 : _order$shipping.firstName,\n      lastName: order === null || order === void 0 ? void 0 : (_order$shipping2 = order.shipping) === null || _order$shipping2 === void 0 ? void 0 : _order$shipping2.lastName,\n      address1: order === null || order === void 0 ? void 0 : (_order$shipping3 = order.shipping) === null || _order$shipping3 === void 0 ? void 0 : _order$shipping3.address1,\n      address2: order === null || order === void 0 ? void 0 : (_order$shipping4 = order.shipping) === null || _order$shipping4 === void 0 ? void 0 : _order$shipping4.address2,\n      city: order === null || order === void 0 ? void 0 : (_order$shipping5 = order.shipping) === null || _order$shipping5 === void 0 ? void 0 : _order$shipping5.city,\n      country: order === null || order === void 0 ? void 0 : (_order$shipping6 = order.shipping) === null || _order$shipping6 === void 0 ? void 0 : _order$shipping6.country,\n      state: order === null || order === void 0 ? void 0 : (_order$shipping7 = order.shipping) === null || _order$shipping7 === void 0 ? void 0 : _order$shipping7.state,\n      postcode: order === null || order === void 0 ? void 0 : (_order$shipping8 = order.shipping) === null || _order$shipping8 === void 0 ? void 0 : _order$shipping8.postcode,\n      email: order === null || order === void 0 ? void 0 : (_order$shipping9 = order.shipping) === null || _order$shipping9 === void 0 ? void 0 : _order$shipping9.email,\n      phone: order === null || order === void 0 ? void 0 : (_order$shipping10 = order.shipping) === null || _order$shipping10 === void 0 ? void 0 : _order$shipping10.phone,\n      company: order === null || order === void 0 ? void 0 : (_order$shipping11 = order.shipping) === null || _order$shipping11 === void 0 ? void 0 : _order$shipping11.company\n    },\n    billing: {\n      firstName: billingData === null || billingData === void 0 ? void 0 : billingData.firstName,\n      lastName: billingData === null || billingData === void 0 ? void 0 : billingData.lastName,\n      address1: billingData === null || billingData === void 0 ? void 0 : billingData.address1,\n      address2: billingData === null || billingData === void 0 ? void 0 : billingData.address2,\n      city: billingData === null || billingData === void 0 ? void 0 : billingData.city,\n      country: billingData === null || billingData === void 0 ? void 0 : billingData.country,\n      state: billingData === null || billingData === void 0 ? void 0 : billingData.state,\n      postcode: billingData === null || billingData === void 0 ? void 0 : billingData.postcode,\n      email: billingData === null || billingData === void 0 ? void 0 : billingData.email,\n      phone: billingData === null || billingData === void 0 ? void 0 : billingData.phone,\n      company: billingData === null || billingData === void 0 ? void 0 : billingData.company\n    },\n    shipToDifferentAddress: order.billingDifferentThanShipping,\n    paymentMethod: order.paymentMethod,\n    isPaid: false\n  };\n\n  if (order.createAccount) {\n    checkoutData.account = {\n      username: order.username,\n      password: order.password\n    };\n  }\n\n  return checkoutData;\n};\n/**\n * Get the updated items in the below format required for mutation input.\n *\n * [\n * { \"key\": \"33e75ff09dd601bbe6dd51039152189\", \"quantity\": 1 },\n * { \"key\": \"02e74f10e0327ad868d38f2b4fdd6f0\", \"quantity\": 1 },\n * ]\n *\n * Creates an array in above format with the newQty (updated Qty ).\n *\n */\n\nexport const getUpdatedItems = (products, newQty, cartKey) => {\n  // Create an empty array.\n  const updatedItems = []; // Loop through the product array.\n\n  products.map(cartItem => {\n    // If you find the cart key of the product user is trying to update, push the key and new qty.\n    if (cartItem.cartKey === cartKey) {\n      updatedItems.push({\n        key: cartItem.cartKey,\n        quantity: parseInt(newQty)\n      }); // Otherwise just push the existing qty without updating.\n    } else {\n      updatedItems.push({\n        key: cartItem.cartKey,\n        quantity: cartItem.qty\n      });\n    }\n  }); // Return the updatedItems array with new Qtys.\n\n  return updatedItems;\n};","map":null,"metadata":{},"sourceType":"module"}