{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport client from \"../components/ApolloClient\";\nimport GET_STATES from \"../queries/get-states\";\n/**\n * Get states\n *\n * @param {String} countryCode Country code\n *\n * @returns {Promise<void>}\n */\n\nexport const getStates = async countryCode => {\n  var _data$wooStates$state, _data$wooStates;\n\n  const {\n    data\n  } = await client.query({\n    query: GET_STATES,\n    variables: {\n      countryCode: countryCode || ''\n    }\n  });\n  return (_data$wooStates$state = data === null || data === void 0 ? void 0 : (_data$wooStates = data.wooStates) === null || _data$wooStates === void 0 ? void 0 : _data$wooStates.states) !== null && _data$wooStates$state !== void 0 ? _data$wooStates$state : [];\n};\n/**\n * Set states for the country.\n *\n * @param {Object} target Target.\n * @param {Function} setTheStates React useState function to set the value of the states basis country selection.\n * @param {Function} setIsFetchingStates React useState function, to manage loading state when request is in process.\n *\n * @return {Promise<void>}\n */\n\nexport const setStatesForCountry = async (target, setTheStates, setIsFetchingStates) => {\n  if ('country' === target.name) {\n    setIsFetchingStates(true);\n    const countryCode = target[target.selectedIndex].getAttribute('data-countrycode');\n    const states = await getStates(countryCode);\n    setTheStates(states || []);\n    setIsFetchingStates(false);\n  }\n};\nexport const handleBillingDifferentThanShipping = (input, setInput, target) => {\n  const newState = _objectSpread(_objectSpread({}, input), {}, {\n    [target.name]: !input.billingDifferentThanShipping\n  });\n\n  setInput(newState);\n};\nexport const handleCreateAccount = (input, setInput, target) => {\n  const newState = _objectSpread(_objectSpread({}, input), {}, {\n    [target.name]: !input.createAccount\n  });\n\n  setInput(newState);\n};","map":null,"metadata":{},"sourceType":"module"}