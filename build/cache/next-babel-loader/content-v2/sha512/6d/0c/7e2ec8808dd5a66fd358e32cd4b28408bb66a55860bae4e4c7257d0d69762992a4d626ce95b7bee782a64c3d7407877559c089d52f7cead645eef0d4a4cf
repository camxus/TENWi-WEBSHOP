{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Layout from '../../src/components/Layout';\nimport { useRouter } from 'next/router';\nimport client from '../../src/components/ApolloClient';\nimport AddToCartButton from '../../src/components/cart/AddToCartButton';\nimport { PRODUCT_BY_SLUG_QUERY, PRODUCT_SLUGS } from '../../src/queries/product-by-slug';\nimport PRODUCTS_AND_CATEGORIES_QUERY from \"../../src/queries/product-and-categories\";\nimport { isEmpty } from 'lodash';\nimport GalleryCarousel from \"../../src/components/single-product/gallery-carousel\";\nimport Price from \"../../src/components/single-product/price\";\nimport prodstyles from \"../../src/styles/product.module.css\";\nexport default function Product(props) {\n  var _product$galleryImage;\n\n  // const { product } = props;\n  const router = useRouter(); // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"Loading...\"\n    });\n  } // const products  = props.products.productsData \n\n\n  const {\n    product\n  } = props;\n  const {\n    categories\n  } = props;\n  const {\n    tags\n  } = props; // console.log('products', products)\n  // const {images} = props\n\n  var images = [];\n  images = images.concat(product.image, product === null || product === void 0 ? void 0 : (_product$galleryImage = product.galleryImages) === null || _product$galleryImage === void 0 ? void 0 : _product$galleryImage.nodes);\n  console.log(images); // console.log(images)\n\n  return (\n    /*#__PURE__*/\n    // <div>\n\n    /* <Layout>\n        { product ? (\n            <div className=\"single-product container mx-auto my-32 px-4 xl:px-0\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div className=\"product-images\">\n                         { !isEmpty( product?.galleryImages?.nodes ) && !isEmpty( product?.image )? (\n                            <div>\n                                <img\n                                src={ product?.image?.sourceUrl }\n                                alt=\"Product Image\"\n                                width=\"100%\"\n                                height=\"auto\"\n                                srcSet={ product?.image?.srcSet }\n                                />\n                                <GalleryCarousel gallery={product?.galleryImages?.nodes}/>\n                            </div>\n                        ) : !isEmpty( product.image ) ? (\n                            <img\n                                src={ product?.image?.sourceUrl }\n                                alt=\"Product Image\"\n                                width=\"100%\"\n                                height=\"auto\"\n                                srcSet={ product?.image?.srcSet }\n                            />\n                        ) : null }\n                    </div>\n                    <div className=\"product-info\">\n                        <h4 className=\"products-main-title text-2xl uppercase\">{ product.name }</h4>\n                        <div\n                             dangerouslySetInnerHTML={ {\n                                __html: product.description,\n                            } }\n                            className=\"product-description mb-5\"\n                        />\n                        <Price salesPrice={product?.price} regularPrice={product?.regularPrice}/>\n                        <AddToCartButton product={ product }/>\n                    </div>\n                </div>\n             </div>\n        ) : (\n            ''\n        ) }\n    </Layout> */\n    _jsx(Layout, {\n      categories: categories,\n      tags: tags,\n      children: product ? /*#__PURE__*/_jsx(\"div\", {\n        className: prodstyles.card,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: prodstyles.card_body,\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: prodstyles.image_container,\n            children: // !isEmpty(images) ? (\n            images.map(image => /*#__PURE__*/_jsx(\"img\", {\n              src: image ? image.sourceUrl : \"\",\n              alt: \"Product Image\",\n              className: prodstyles.image // objectFit=\"cover\"\n\n            }))\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: prodstyles.rightContainer,\n            children: [/*#__PURE__*/_jsx(\"h4\", {\n              className: prodstyles.card_title,\n              children: product.name\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: prodstyles.card_text,\n              dangerouslySetInnerHTML: {\n                __html: product.description\n              }\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: prodstyles.add_to_cart,\n              children: /*#__PURE__*/_jsx(AddToCartButton, {\n                product: product\n              })\n            })]\n          })]\n        })\n      }) : ''\n    })\n  );\n}\n;\nexport async function getStaticProps(context) {\n  const {\n    params: {\n      slug\n    }\n  } = context;\n  const {\n    data\n  } = await client.query({\n    query: PRODUCT_BY_SLUG_QUERY,\n    variables: {\n      slug\n    }\n  });\n  var categories = await client.query({\n    query: PRODUCTS_AND_CATEGORIES_QUERY\n  }); // console.log(categories.data.productCategories)\n\n  var tags = categories.data.productTags.nodes;\n  categories = categories.data.productCategories.nodes;\n  return {\n    props: {\n      product: (data === null || data === void 0 ? void 0 : data.product) || {},\n      categories: categories ? categories : [],\n      tags: tags ? tags : []\n    },\n    revalidate: 1\n  };\n}\nexport async function getStaticPaths() {\n  var _data$products, _data$products2;\n\n  const {\n    data\n  } = await client.query({\n    query: PRODUCT_SLUGS\n  });\n  const pathsData = [];\n  (data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.nodes) && (data === null || data === void 0 ? void 0 : (_data$products2 = data.products) === null || _data$products2 === void 0 ? void 0 : _data$products2.nodes.map(product => {\n    if (!isEmpty(product === null || product === void 0 ? void 0 : product.slug)) {\n      pathsData.push({\n        params: {\n          slug: product === null || product === void 0 ? void 0 : product.slug\n        }\n      });\n    }\n  }));\n  return {\n    paths: pathsData,\n    fallback: true\n  };\n}","map":null,"metadata":{},"sourceType":"module"}